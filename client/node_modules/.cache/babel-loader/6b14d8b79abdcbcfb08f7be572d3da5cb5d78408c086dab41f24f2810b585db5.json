{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{useQuery,useMutation}from'@apollo/client';import{GET_MY_NOTIFICATIONS}from'../graphql/queries';import{MARK_NOTIFICATION_READ,MARK_ALL_NOTIFICATIONS_READ}from'../graphql/mutations';import{useAuth}from'./AuthContext';// Create the notification context\nimport{jsx as _jsx}from\"react/jsx-runtime\";const NotificationContext=/*#__PURE__*/createContext();// Custom hook to use the notification context\nexport const useNotifications=()=>useContext(NotificationContext);export const NotificationProvider=_ref=>{let{children}=_ref;const[notifications,setNotifications]=useState([]);const[unreadCount,setUnreadCount]=useState(0);const{user}=useAuth();// Query to get user notifications\nconst{data,loading,refetch}=useQuery(GET_MY_NOTIFICATIONS,{skip:!user,fetchPolicy:'network-only'});// Mutations for marking notifications as read\nconst[markNotificationRead]=useMutation(MARK_NOTIFICATION_READ);const[markAllNotificationsRead]=useMutation(MARK_ALL_NOTIFICATIONS_READ);// Update notifications when data changes\nuseEffect(()=>{if(data&&data.myNotifications){setNotifications(data.myNotifications);setUnreadCount(data.myNotifications.filter(n=>!n.read).length);}},[data]);// Mark a single notification as read\nconst markAsRead=async notificationId=>{try{await markNotificationRead({variables:{notificationId}});// Update local state\nsetNotifications(prev=>prev.map(notification=>notification._id===notificationId?{...notification,read:true}:notification));setUnreadCount(prev=>Math.max(0,prev-1));}catch(error){console.error('Error marking notification as read:',error);}};// Mark all notifications as read\nconst markAllAsRead=async()=>{try{await markAllNotificationsRead();// Update local state\nsetNotifications(prev=>prev.map(notification=>({...notification,read:true})));setUnreadCount(0);}catch(error){console.error('Error marking all notifications as read:',error);}};// Refresh notifications\nconst refreshNotifications=()=>{if(user){refetch();}};const value={notifications,unreadCount,loading,markAsRead,markAllAsRead,refreshNotifications};return/*#__PURE__*/_jsx(NotificationContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useQuery","useMutation","GET_MY_NOTIFICATIONS","MARK_NOTIFICATION_READ","MARK_ALL_NOTIFICATIONS_READ","useAuth","jsx","_jsx","NotificationContext","useNotifications","NotificationProvider","_ref","children","notifications","setNotifications","unreadCount","setUnreadCount","user","data","loading","refetch","skip","fetchPolicy","markNotificationRead","markAllNotificationsRead","myNotifications","filter","n","read","length","markAsRead","notificationId","variables","prev","map","notification","_id","Math","max","error","console","markAllAsRead","refreshNotifications","value","Provider"],"sources":["/Users/mikeb/familycabin/client/src/context/NotificationContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { GET_MY_NOTIFICATIONS } from '../graphql/queries';\nimport { MARK_NOTIFICATION_READ, MARK_ALL_NOTIFICATIONS_READ } from '../graphql/mutations';\nimport { useAuth } from './AuthContext';\n\n// Create the notification context\nconst NotificationContext = createContext();\n\n// Custom hook to use the notification context\nexport const useNotifications = () => useContext(NotificationContext);\n\nexport const NotificationProvider = ({ children }) => {\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const { user } = useAuth();\n  \n  // Query to get user notifications\n  const { data, loading, refetch } = useQuery(GET_MY_NOTIFICATIONS, {\n    skip: !user,\n    fetchPolicy: 'network-only',\n  });\n  \n  // Mutations for marking notifications as read\n  const [markNotificationRead] = useMutation(MARK_NOTIFICATION_READ);\n  const [markAllNotificationsRead] = useMutation(MARK_ALL_NOTIFICATIONS_READ);\n  \n  // Update notifications when data changes\n  useEffect(() => {\n    if (data && data.myNotifications) {\n      setNotifications(data.myNotifications);\n      setUnreadCount(data.myNotifications.filter(n => !n.read).length);\n    }\n  }, [data]);\n  \n  // Mark a single notification as read\n  const markAsRead = async (notificationId) => {\n    try {\n      await markNotificationRead({\n        variables: { notificationId },\n      });\n      \n      // Update local state\n      setNotifications(prev => \n        prev.map(notification => \n          notification._id === notificationId \n            ? { ...notification, read: true } \n            : notification\n        )\n      );\n      \n      setUnreadCount(prev => Math.max(0, prev - 1));\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n    }\n  };\n  \n  // Mark all notifications as read\n  const markAllAsRead = async () => {\n    try {\n      await markAllNotificationsRead();\n      \n      // Update local state\n      setNotifications(prev => \n        prev.map(notification => ({ ...notification, read: true }))\n      );\n      \n      setUnreadCount(0);\n    } catch (error) {\n      console.error('Error marking all notifications as read:', error);\n    }\n  };\n  \n  // Refresh notifications\n  const refreshNotifications = () => {\n    if (user) {\n      refetch();\n    }\n  };\n  \n  const value = {\n    notifications,\n    unreadCount,\n    loading,\n    markAsRead,\n    markAllAsRead,\n    refreshNotifications,\n  };\n  \n  return (\n    <NotificationContext.Provider value={value}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}