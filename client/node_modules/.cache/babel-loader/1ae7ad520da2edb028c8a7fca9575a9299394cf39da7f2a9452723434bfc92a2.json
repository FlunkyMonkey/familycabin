{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{useApolloClient}from'@apollo/client';import jwt_decode from'jwt-decode';// Create the auth context\nimport{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();// Custom hook to use the auth context\nexport const useAuth=()=>useContext(AuthContext);export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);const client=useApolloClient();// Check for token on initial load\nuseEffect(()=>{const checkToken=async()=>{const token=localStorage.getItem('auth_token');if(token){try{// Verify token hasn't expired\nconst decodedToken=jwt_decode(token);const currentTime=Date.now()/1000;if(decodedToken.exp<currentTime){// Token expired\nlogout();}else{// Valid token, set user\nsetUser(decodedToken.data);}}catch(error){console.error('Token validation error:',error);logout();}}setLoading(false);};checkToken();},[]);// Login function\nconst login=(token,userData)=>{localStorage.setItem('auth_token',token);setUser(userData);};// Logout function\nconst logout=()=>{localStorage.removeItem('auth_token');setUser(null);// Reset Apollo cache\nclient.resetStore();};// Update user data\nconst updateUser=userData=>{setUser(prevUser=>({...prevUser,...userData}));};// Check if user is admin of a specific cabin\nconst isAdminOfCabin=cabinId=>{if(!user||!user.cabins)return false;return user.cabins.some(cabin=>cabin.cabinId===cabinId&&cabin.role==='ADMIN');};// Check if user is member of a specific cabin\nconst isMemberOfCabin=cabinId=>{if(!user||!user.cabins)return false;return user.cabins.some(cabin=>cabin.cabinId===cabinId);};// Check if user is global admin\nconst isGlobalAdmin=()=>{return user&&user.role==='GLOBAL_ADMIN';};const value={user,loading,login,logout,updateUser,isAdminOfCabin,isMemberOfCabin,isGlobalAdmin};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useApolloClient","jwt_decode","jsx","_jsx","AuthContext","useAuth","AuthProvider","_ref","children","user","setUser","loading","setLoading","client","checkToken","token","localStorage","getItem","decodedToken","currentTime","Date","now","exp","logout","data","error","console","login","userData","setItem","removeItem","resetStore","updateUser","prevUser","isAdminOfCabin","cabinId","cabins","some","cabin","role","isMemberOfCabin","isGlobalAdmin","value","Provider"],"sources":["/Users/mikeb/familycabin/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useApolloClient } from '@apollo/client';\nimport jwt_decode from 'jwt-decode';\n\n// Create the auth context\nconst AuthContext = createContext();\n\n// Custom hook to use the auth context\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const client = useApolloClient();\n\n  // Check for token on initial load\n  useEffect(() => {\n    const checkToken = async () => {\n      const token = localStorage.getItem('auth_token');\n      if (token) {\n        try {\n          // Verify token hasn't expired\n          const decodedToken = jwt_decode(token);\n          const currentTime = Date.now() / 1000;\n          \n          if (decodedToken.exp < currentTime) {\n            // Token expired\n            logout();\n          } else {\n            // Valid token, set user\n            setUser(decodedToken.data);\n          }\n        } catch (error) {\n          console.error('Token validation error:', error);\n          logout();\n        }\n      }\n      setLoading(false);\n    };\n    \n    checkToken();\n  }, []);\n\n  // Login function\n  const login = (token, userData) => {\n    localStorage.setItem('auth_token', token);\n    setUser(userData);\n  };\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem('auth_token');\n    setUser(null);\n    // Reset Apollo cache\n    client.resetStore();\n  };\n\n  // Update user data\n  const updateUser = (userData) => {\n    setUser(prevUser => ({\n      ...prevUser,\n      ...userData\n    }));\n  };\n\n  // Check if user is admin of a specific cabin\n  const isAdminOfCabin = (cabinId) => {\n    if (!user || !user.cabins) return false;\n    return user.cabins.some(\n      cabin => cabin.cabinId === cabinId && cabin.role === 'ADMIN'\n    );\n  };\n\n  // Check if user is member of a specific cabin\n  const isMemberOfCabin = (cabinId) => {\n    if (!user || !user.cabins) return false;\n    return user.cabins.some(\n      cabin => cabin.cabinId === cabinId\n    );\n  };\n\n  // Check if user is global admin\n  const isGlobalAdmin = () => {\n    return user && user.role === 'GLOBAL_ADMIN';\n  };\n\n  const value = {\n    user,\n    loading,\n    login,\n    logout,\n    updateUser,\n    isAdminOfCabin,\n    isMemberOfCabin,\n    isGlobalAdmin\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC7E,OAASC,eAAe,KAAQ,gBAAgB,CAChD,MAAO,CAAAC,UAAU,KAAM,YAAY,CAEnC;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,WAAW,cAAGR,aAAa,CAAC,CAAC,CAEnC;AACA,MAAO,MAAM,CAAAS,OAAO,CAAGA,CAAA,GAAMR,UAAU,CAACO,WAAW,CAAC,CAEpD,MAAO,MAAM,CAAAE,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGZ,QAAQ,CAAC,IAAI,CAAC,CACtC,KAAM,CAACa,OAAO,CAAEC,UAAU,CAAC,CAAGd,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAAAe,MAAM,CAAGb,eAAe,CAAC,CAAC,CAEhC;AACAD,SAAS,CAAC,IAAM,CACd,KAAM,CAAAe,UAAU,CAAG,KAAAA,CAAA,GAAY,CAC7B,KAAM,CAAAC,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,CAChD,GAAIF,KAAK,CAAE,CACT,GAAI,CACF;AACA,KAAM,CAAAG,YAAY,CAAGjB,UAAU,CAACc,KAAK,CAAC,CACtC,KAAM,CAAAI,WAAW,CAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,IAAI,CAErC,GAAIH,YAAY,CAACI,GAAG,CAAGH,WAAW,CAAE,CAClC;AACAI,MAAM,CAAC,CAAC,CACV,CAAC,IAAM,CACL;AACAb,OAAO,CAACQ,YAAY,CAACM,IAAI,CAAC,CAC5B,CACF,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CAC/CF,MAAM,CAAC,CAAC,CACV,CACF,CACAX,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,CAEDE,UAAU,CAAC,CAAC,CACd,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAa,KAAK,CAAGA,CAACZ,KAAK,CAAEa,QAAQ,GAAK,CACjCZ,YAAY,CAACa,OAAO,CAAC,YAAY,CAAEd,KAAK,CAAC,CACzCL,OAAO,CAACkB,QAAQ,CAAC,CACnB,CAAC,CAED;AACA,KAAM,CAAAL,MAAM,CAAGA,CAAA,GAAM,CACnBP,YAAY,CAACc,UAAU,CAAC,YAAY,CAAC,CACrCpB,OAAO,CAAC,IAAI,CAAC,CACb;AACAG,MAAM,CAACkB,UAAU,CAAC,CAAC,CACrB,CAAC,CAED;AACA,KAAM,CAAAC,UAAU,CAAIJ,QAAQ,EAAK,CAC/BlB,OAAO,CAACuB,QAAQ,GAAK,CACnB,GAAGA,QAAQ,CACX,GAAGL,QACL,CAAC,CAAC,CAAC,CACL,CAAC,CAED;AACA,KAAM,CAAAM,cAAc,CAAIC,OAAO,EAAK,CAClC,GAAI,CAAC1B,IAAI,EAAI,CAACA,IAAI,CAAC2B,MAAM,CAAE,MAAO,MAAK,CACvC,MAAO,CAAA3B,IAAI,CAAC2B,MAAM,CAACC,IAAI,CACrBC,KAAK,EAAIA,KAAK,CAACH,OAAO,GAAKA,OAAO,EAAIG,KAAK,CAACC,IAAI,GAAK,OACvD,CAAC,CACH,CAAC,CAED;AACA,KAAM,CAAAC,eAAe,CAAIL,OAAO,EAAK,CACnC,GAAI,CAAC1B,IAAI,EAAI,CAACA,IAAI,CAAC2B,MAAM,CAAE,MAAO,MAAK,CACvC,MAAO,CAAA3B,IAAI,CAAC2B,MAAM,CAACC,IAAI,CACrBC,KAAK,EAAIA,KAAK,CAACH,OAAO,GAAKA,OAC7B,CAAC,CACH,CAAC,CAED;AACA,KAAM,CAAAM,aAAa,CAAGA,CAAA,GAAM,CAC1B,MAAO,CAAAhC,IAAI,EAAIA,IAAI,CAAC8B,IAAI,GAAK,cAAc,CAC7C,CAAC,CAED,KAAM,CAAAG,KAAK,CAAG,CACZjC,IAAI,CACJE,OAAO,CACPgB,KAAK,CACLJ,MAAM,CACNS,UAAU,CACVE,cAAc,CACdM,eAAe,CACfC,aACF,CAAC,CAED,mBACEtC,IAAA,CAACC,WAAW,CAACuC,QAAQ,EAACD,KAAK,CAAEA,KAAM,CAAAlC,QAAA,CAChCA,QAAQ,CACW,CAAC,CAE3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}